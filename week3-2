wEZNlTUsPt7F6wEwN8jIdg7sPYYFIcgrd0hh_olJOUC6VBrOdbQXCDnfNzFZs5eZ9Y_UE2TAt1DCFcEIY2jcNA==

 Serial.print("Voltage: " );
 Serial.println(Voltage);



from influxdb_client import influxDBClient
import time
import serial
#=== influxDB 2.x 설정 ===
influxdb_url = "http://localhost8086" 	#기본
influxdb_token = "aKA6ZrbqqVsqkNd2M_qs0pyu3e_LydFHgeuC8TdZKMSoJmd8N0
influxdb_org = test		# influxDB에서 설정한 조직 이름
influxdb_bucket = "dust"	# 데이터가 저장될 버킷 이름

# === (1) Arduino 시리얼 포트 설정 ===
serial_port = "COM7"	# 아두이노 포트 (Windows 기준)
baudrate = 9600		# 시리얼 통신 속도
timeout = 2		# 타임아웃 (초)

# influxDB2.0 클라이언트 생성
client = influxDBClient(url = influxdb_url, token = influxdb_token, org = influxdb_org)

# === (3) influxDB 클라이언트 설정 ===
client = influxDBClient(url = influxdb_url, token = influxdb_token, org = influxdb_org)
write_api = client.write_api()

# === (4) 시리얼 포트 열기 ===
try:
     ser = serial.Serial(serial_port, baudrate, timeout = timeout)
     print(f"Connected to {serial_port} at {baudrate} baud")
except serial.SerialException:
     print("Failed to connect to serial port.")
     exit()

# === (5) 시리얼 데이터 읽기 및 influxDB 저장 ===
try:
    while True:
         if ser.in_waiting > 0:
 	line = ser.readline().decode('utf-8').strip()	#시리얼 데이터 읽기
	print(f"Received: {line}")

	# 데이터가 "temperature = 25.3" 같은 형식이라고 가정
	if "=" in line:
	   key, value = line.split("=")
	   try:
	       value = line.split("=")		#숫자로 변환
	       # influxDB 2.x 데이터 퐴ㅅ
	       data = f"sensor_data,device=arduino {key}={value}"
	       write_api.write(bucket=influxdb_bucket, record=data)
	       print(f"Data written to influxDB: {key}={value}")

	   except ValueError:
	       print("lnvalid data format:)
    time.sleep(1) 	# 1초 대기

except Keyboardinterrupt:
    print(Stopping data collection...")

finally:
    ser.close()
